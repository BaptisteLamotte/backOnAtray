#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backonatray:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



var chatRoomModel = require('../model/chatRoom')
var talentModel = require('../model/talents')
var restaurantModel = require('../model/restaurants')
var io = require('socket.io')(server); 

io.on('connection', async function(socket){
  console.log('user has join')

  socket.on('join', ({name, room}, )=>{
    console.log('name', name)
    console.log('room', room)
    var user = {id: socket.id, name , room}
    console.log('user.name uer.room',user.name, user.room)
    socket.join(user.room)
  }) 

  socket.on('sendMessage', async (message )=>{
    

    console.log('je passe ici')
    
    var roomId = message.room
    var chatRoomToFind = await chatRoomModel.findById(roomId)
    let expediteur = message.name
    let destinataire = message.desti

    var expeToCheck = await talentModel.findOne({token:message.name})
    
    if(expeToCheck){
       expediteur = expeToCheck.firstName
       
    }
    else{
     
      expeToCheckk = await restaurantModel.findOne({token:message.name})
      console.log('expetocheck',expeToCheckk)
     expediteur = expeToCheckk.name
    }
    
    var destiToCheck = await talentModel.findOne({token : message.desti})
    if(destiToCheck){
       destinataire = destiToCheck.firstName
    }else{
      destiToCheck = await restaurantModel.findOne({token:message.desti})
       destinataire = destiToCheck.name
    }

    socket.to(message.room).broadcast.emit('message',{message : message.message, name : expediteur, destinataire : destinataire, tokenExpe : message })

   //console.log(chatRoomToFind)
    // var destinataire = await userTestModel.findOne({name : message.destinataire})
   //var destinataire = await userTestModel.findOne({name : message.destinataire})
   //chatRoomToFind.message.push({content : message.message, expediteur : message.expediteur, destinataire : message.destinataire})
   chatRoomToFind.message.push({content: message.message, expediteur : expediteur, destinataire : destinataire, tokenExpe: message.name, tokenDesti : message.desti})
   await chatRoomToFind.save()
  
  })


  socket.on('disco', ()=>{
    console.log('user had left')
  })
     
   
  });
  
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
